{"componentChunkName":"component---src-templates-post-js","path":"/posts/Free-objects/","result":{"data":{"markdownRemark":{"html":"<p>In the <a href=\"http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612\">GOF book</a>, the <a href=\"https://en.wikipedia.org/wiki/Interpreter_pattern\">interpreter pattern</a> is probably one of the most poorly described patterns. The interpreter pattern basically consists of building a specialty programming language out of objects in your language, and then interpreting it on the fly. <a href=\"https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule\">Greenspun's Tenth Rule</a> describes it as follows:</p>\n<blockquote>\n<p>Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.</p>\n</blockquote>\n<p>In essence, the interpreter pattern consists of dynamically generating and transmitting code at run time instead of statically generating it at compile time.</p>\n<p>However, I believe that modern functional programming provides us some alternatives that provide functionality approaching that of embedding a lisp interpreter in our runtime, but also with some measures of type safety. I'm going to describe Free Objects, and how they can be used as a substitute for an interpreter.</p>\n<p>At Wingify, we have several important interpreters floating around in our (currently very experimental) event driven notification system. In this post I'll show how Free Boolean Algebras can drastically simplify the process of defining custom events.</p>\n<h1 id=\"algebraic-structures\" style=\"position:relative;\"><a href=\"#algebraic-structures\" aria-label=\"algebraic structures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algebraic structures</h1>\n<p>In functional programming, there are a lot of algebraic structures that are used to write programs in a type-safe manner. <a href=\"https://blog.safaribooksonline.com/2013/05/15/monoids-for-programmers-a-scala-example/\">Monoids</a> are one of the simplest examples - a monoid is a type <code class=\"language-text\">T</code> together with an operation <code class=\"language-text\">|+|</code> and an element <code class=\"language-text\">zero[T]</code> with the following properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a |+| (b |+| c) === (a |+| b) |+| c   //associativity\na |+| zero === a                      //zero</code></pre></div>\n<p>A type is a monoid if it contains elements which can be added together in an associative way, together with a zero element. A number of common structures form monoids - integers (with <code class=\"language-text\">a |+| b = a + b</code> ) are a simple example. For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 + (5 + 7) === (3 + 5) + 7 === 15\n-17 + 0 === -17</code></pre></div>\n<p>But many other data structures also obey this law. Lists and strings, using <code class=\"language-text\">|+|</code> for concatenation and either <code class=\"language-text\">[]</code> or <code class=\"language-text\">&quot;&quot;</code> as the zero element, are also monoids. Monoids are commonly used as data structures to represent logs, for example.</p>\n<p>Another algebraic structure is the Boolean Algebra. This is a type <code class=\"language-text\">T</code> with three operations - <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">|</code> and <code class=\"language-text\">~</code>, with a rather larger set of properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a &amp; (b &amp; c) === (a &amp; b) &amp; c\na | (b | c) === (a | b) | c\n~~a === a\na &amp; (b | c) === (a &amp; b) | (a &amp; c)\na | (b &amp; c) === (a | b) &amp; (a | c)\na &amp; a === a\na | a === a\n...etc...</code></pre></div>\n<p>A boolean algebra also has both a <code class=\"language-text\">zero</code> and <code class=\"language-text\">one</code> element, satisfying <code class=\"language-text\">zero &amp; _ === zero</code>, <code class=\"language-text\">zero | x === x</code>, <code class=\"language-text\">one &amp; x === x</code> and <code class=\"language-text\">one | _ === one</code>. There are many common boolean algebras as well - <code class=\"language-text\">Boolean</code> of course, but also fixed-length bitmaps (with operations interpreted bitwise), functions of type <code class=\"language-text\">T =&gt; Boolean</code> (here <code class=\"language-text\">f &amp; g = (x =&gt; f(x) &amp;&amp; g(x))</code>, etc).</p>\n<p>There are quite a few more algebraic structures - monads provide another example. But I'm going to leave the trickier ones for another post.</p>\n<h2 id=\"side-note-boolean-algebras-are-monoids-too\" style=\"position:relative;\"><a href=\"#side-note-boolean-algebras-are-monoids-too\" aria-label=\"side note boolean algebras are monoids too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side note: Boolean Algebras are Monoids Too</h2>\n<p>One of the interesting facts about abstract algebra is that many of these structures interact with each other in interesting ways. For example, any boolean algebra also has <em>two</em> monoids built into it. The operations <code class=\"language-text\">&amp;</code> and <code class=\"language-text\">one</code> satisfy the laws of a monoid:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a &amp; (b &amp; c) === (a &amp; b) &amp; c\na &amp; one === a</code></pre></div>\n<p>Similarly, the operations <code class=\"language-text\">|</code> and <code class=\"language-text\">zero</code> also satisfy the monoid laws:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a | (b | c) === (a | b) | c\na | zero === a</code></pre></div>\n<h1 id=\"event-predicates---take-one\" style=\"position:relative;\"><a href=\"#event-predicates---take-one\" aria-label=\"event predicates   take one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event predicates - take one</h1>\n<p>In our experimental (i.e., you can't use it yet) event based targeting system, I wanted to create an easy way for users to trigger events. I.e., I want to be able to define a formula and evaluate whether it is true or false for some event. E.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">((EventType == &#39;pageview&#39;) &amp; (url == &#39;http://www.vwo.com/pricing/&#39;))\n   | ((EventType == &#39;custom&#39;) &amp; (custom_event_name == &#39;pricing_popup_displayed&#39;))</code></pre></div>\n<p>This can be represented in Scala pretty straightforwardly:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sealed trait EventPredicate {\n  def matches(evt: Event): Boolean\n  def &amp;(other: EventPredicate) = And(this, other)\n  def |(other: EventPRedicate) = Or(this, other)\n  ...\n}\ncase class EventType(kind: String) extends EventPredicate {\n  def matches(evt: Event) = EventLenses.eventType.get(evt) == kind\n}</code></pre></div>\n<p>We also need boolean operators:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case class And(a: EventPredicate, b: EventPredicate) extends EventPredicate {\n  def matches(evt: Event) = a.matches(evt) &amp;&amp; b.matches(evt)\n}\n\n...etc...</code></pre></div>\n<p>Unfortunately, we have more than one type of predicate. We had quite a few requirements, in fact:</p>\n<ol>\n<li>We want to compile <em>some</em> predicates to Javascript so they can be evaluated browser side.</li>\n<li>We want to define compound predicates for the convenience of the user. E.g. <code class=\"language-text\">GACampaign(utm_source, utm_campaign, ...)</code> instead of <code class=\"language-text\">URLParam(&quot;utm_source&quot;, &quot;email&quot;) &amp; URLParam(&quot;utm_campaign&quot;, &quot;ilovepuppies&quot;) &amp; ...</code>, but we'd also like to avoid re-implementing in multiple places things like parsing URL params.</li>\n<li>We actually have multiple types of predicate - <code class=\"language-text\">EventPredicate</code>, <code class=\"language-text\">UserPredicate</code>, <code class=\"language-text\">PagePredicate</code> and we'd like to avoid duplicating code to handle simple boolean algebra stuff. We'd also like to avoid namespace collisions, so we'd need to do <code class=\"language-text\">AndEvent</code>, <code class=\"language-text\">AndUser</code>, etc.</li>\n<li>We also need to serialize these data structures to JSON, so it would be great if we could not duplicate code around things like serializing <code class=\"language-text\">And___</code>, <code class=\"language-text\">Or___</code>, etc.</li>\n</ol>\n<p>The simple object-oriented approach described above doesn't really satisfy all these requirements.</p>\n<h1 id=\"the-free-boolean-algebra\" style=\"position:relative;\"><a href=\"#the-free-boolean-algebra\" aria-label=\"the free boolean algebra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Free Boolean Algebra</h1>\n<p>Ultimately, what I really want to do is the following. I want to define a <em>set</em> of objects, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case class EventType(kind: String) extends EventSpec\ncase class URLMatch(url: String) extends EventSpec\n...</code></pre></div>\n<p>Then I want to be able to build a boolean algebra out of them with some sort of simple type constructor. Given\nan object created with this type constructor, I then need to be able to make various algebra preserving transformations.</p>\n<p>Luckily the field of abstract algebra provides a generic solution to this problem - the <a href=\"https://en.wikipedia.org/wiki/Free_object\">Free Object</a>.\nA free object is a version of an algebraic structure which has no interpretation whatsoever - it's a purely symbolic\nway of representing that algebra. But the important thing about the free object is that it gives interpretation almost\nfor free.</p>\n<p>More concretely, a Free Object is a <a href=\"http://eed3si9n.com/learning-scalaz/Functor.html\">Functor</a> with a particular natural transformation. I.e., for any type <code class=\"language-text\">T</code>, there is a type <code class=\"language-text\">FreeObj[T]</code> with the following properties:</p>\n<ol>\n<li>For any object <code class=\"language-text\">t</code> of type <code class=\"language-text\">T</code>, there is a corresponding object <code class=\"language-text\">t.point[FreeObj]</code> having type <code class=\"language-text\">FreeObj[T]</code>. I.e., objects outside the functor can be lifted into it.</li>\n<li>Let <code class=\"language-text\">X</code> be another object having the same algebraic structure (e.g., <code class=\"language-text\">X</code> is any boolean algebra). Then for any function <code class=\"language-text\">f: T =&gt; X</code>, there is a natural transformation <code class=\"language-text\">nat(f): FreeObj[T] =&gt; X</code> with the properties that (a) <code class=\"language-text\">nat(f)(t.point) = f(t)</code> and (b) <code class=\"language-text\">nat(f)</code> preserves the structure of the underlying algebra.</li>\n</ol>\n<p>Preserving the structure of the underlying algebra is important - this means that for a boolean algebra, <code class=\"language-text\">nat(f)(x &amp; y) === nat(f)(x) &amp; nat(f)(y)</code>, <code class=\"language-text\">nat(f)(x | y) === nat(f)(x) | nat(f)(y)</code>, etc.This property of preserving the structure is called <em>homomorphism</em>.</p>\n<p>This bit of mathematics is, in programming terms, the API of our FreeObject. This API allows us to turn any type into a monoid/boolean algebra/etc, and it guarantees that no information whatsoever is lost by doing so.</p>\n<h2 id=\"how-to-use-it\" style=\"position:relative;\"><a href=\"#how-to-use-it\" aria-label=\"how to use it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use it</h2>\n<p>We've developed a library which includes Free Boolean Algebras called <a href=\"https://github.com/stucchio/oldmonk\">Old Monk</a>. It's named after the <a href=\"https://en.wikipedia.org/wiki/Old_Monk\">finest rum in the world</a>. Old Monk also builds on top of <a href=\"https://github.com/non/spire\">Spire</a>, which provides various abstract algebra type classes in Scala.</p>\n<p>To create a simple Boolean algebra for events, we import the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import com.vwo.oldmonk.free._\nimplicit val freeBoolAlgebra = FreeBoolListAlgebra //There are multiple variants\ntype FreeBool = FreeBoolList\nimport spire.algebra._\nimport spire.implicits._</code></pre></div>\n<p>We then define our underlying type:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sealed trait EventSpec\ncase class CookieValue(key: String, value: String) extends EventSpec\n...</code></pre></div>\n<p>Finally, we define the predicate type:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type EventPredicate = FreeBool[EventSpec]</code></pre></div>\n<p>Combining objects is now straightforward, and uses Spire syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">val pred = CookieValue(&quot;foo&quot;, &quot;bar&quot;).point[FreeBool] | URLParam(&quot;_foo&quot;, &quot;bar&quot;)\nval pred2 = ...\nval pred3 = ~pred &amp; pred2</code></pre></div>\n<p>(There is an implicit in oldmonk which is smart enough to turn the <code class=\"language-text\">URLParam</code> object into an <code class=\"language-text\">EventPredicate</code>, but not smart enough to apply to the first one.)</p>\n<p>That's great - we've now got a boolean algebra. But how do we use it?</p>\n<h3 id=\"evaluating-a-predicate\" style=\"position:relative;\"><a href=\"#evaluating-a-predicate\" aria-label=\"evaluating a predicate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Evaluating a predicate</h3>\n<p>To evaluate a predicate, we need to use the <code class=\"language-text\">nat</code> operation. Recall that the type of <code class=\"language-text\">nat</code> is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def nat[T,X](f: T =&gt; X): FreeBool[T] =&gt; X</code></pre></div>\n<p>So to use this, we simply need to define how our function <code class=\"language-text\">f</code> operates on <em>individual</em> <code class=\"language-text\">EventSpec</code> objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def evalEventSpec(evt: Event): (EventSpec =&gt; Boolean) = (e:EventSpec) =&gt;\n  e match {\n    case CookieValue(k, v) =&gt; EventLenses.cookie(k).get(evt).getOrElse(false)\n    case URLMatches(url) =&gt; EventLenses.url.get(evt) == url\n    ...\n  }</code></pre></div>\n<p>Then by the magic of <code class=\"language-text\">nat</code>, we can evaluate predicates:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def evaluateEventPredicate(pred: EventPredicate, event: Event): Boolean =\n  nat(evalEventSpec(event))(pred)</code></pre></div>\n<p>The logic is that <code class=\"language-text\">evalEventSpec(event)</code> has type <code class=\"language-text\">EventSpec =&gt; Boolean</code>. The operation <code class=\"language-text\">nat</code> lifts this to\na function mapping <code class=\"language-text\">EventPredicate =&gt; Boolean</code>, and then this function is applied to the actual predicate.</p>\n<p>Due to the laws of the Free Boolean Algebra, we know that this method must evaluate things correctly. I.e.,\nimagine we had a predicate <code class=\"language-text\">a.point[FreeBool] | b.point[FreeBool]</code>.</p>\n<p>By the second law of free Boolean algebras, the homomorphism property, we know that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nat(f)(a.point[FreeBool] | b.point[FreeBool]) ===\n  nat(f)(a.point[FreeBool]) | nat(f)(b.point[FreeBool])</code></pre></div>\n<p>By the first law, we know that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nat(f)(a.point[FreeBool]) === f(a)\nnat(f)(b.point[FreeBool]) === f(b)</code></pre></div>\n<p>Substituting this in yields:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nat(f)(a.point[FreeBool] | b.point[FreeBool]) ===\n  nat(f)(a.point[FreeBool]) | nat(f)(b.point[FreeBool]) ===\n  f(a) | f(b)</code></pre></div>\n<p>Thus, the <code class=\"language-text\">nat</code> function has faithfully created a way for us to evaluate our predicates.</p>\n<h3 id=\"translating-predicates\" style=\"position:relative;\"><a href=\"#translating-predicates\" aria-label=\"translating predicates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Translating predicates</h3>\n<p>Consider one of our other requirements - we want to build convenience predicates for the user, but we don't want to duplicate work to evaluate them.</p>\n<p>To handle this case, we'd tweak the underlying definition of our predicates a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sealed trait EventSpec\n\nsealed trait PrimitiveEventSpec extends EventSpec\ncase class CookieValue(key: String, value: String) extends PrimitiveEventSpec\n...\n\nsealed trait CompoundEventSpec extends EventSpec\ncase class GACampaignMatches(source: String,campaign: String)</code></pre></div>\n<p>We'll approach this problem in two ways. First, we'll build a <em>translation</em> layer - a way to translate <code class=\"language-text\">FreeBool[EventSpec] =&gt; FreeBool[PrimitiveEventSpec]</code>.\nThen we'll build the <em>evaluation</em> layer - a way to compute <code class=\"language-text\">FreeBool[PrimitiveEventSpec] =&gt; Boolean</code>. With this structure, we only need to\ndefine evaluation on the primitives.</p>\n<p>The translation is actually very simple with <code class=\"language-text\">nat</code>. First we define a mapping from <code class=\"language-text\">EventSpec =&gt; FreeBool[PrimitiveEventSpec]</code>, and then we use <code class=\"language-text\">nat</code> to lift this function to <code class=\"language-text\">FreeBool</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def primitivizeSpec(es: EventSpec): FreeBool[PrimitiveEventSpec]) = (es: EventSpec) match {\n  case (x: PrimitiveEventSpec) =&gt; x.point[FreeBool]\n  case (c: CompountEventSpec) =&gt; c match {\n    case GACampaignMatches(source, campaign) =&gt;\n      (URLParam(&quot;utm_source&quot;, source) : FreeBool[PrimitiveEventSpec]) &amp; (URLParam(&quot;utm_campaign&quot;, campaign) : FreeBool[PrimitiveEventSpec])\n      ...\n  }\n}\n\nval primitivize: FreeBool[EventSpec] =&gt; FreeBool[PrimitiveEventSpec] = nat(primitivizeSpec _)</code></pre></div>\n<p>Then we would define evaluation the same as above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def evalPrimitiveEventSpec(evt: Event): (EventSpec =&gt; Boolean) = (e:EventSpec) =&gt;\n  e match {\n    case CookieValue(k, v) =&gt; EventLenses.cookie(k).get(evt).getOrElse(false)\n    case URLMatches(url) =&gt; EventLenses.url.get(evt) == url\n    ...\n  }\n\ndef evaluatePrimitiveEventPredicate(pred: PrimitiveEventPredicate, event: Event): Boolean =\n  nat(evalPrimitiveEventSpec(event))(pred)</code></pre></div>\n<p>Finally we would define evaluation as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def evaluateEventPredicate(pred: EventPredicate, event: Event): Boolean =\n  evaluatePrimitiveEventPredicate(primitivize(pred))</code></pre></div>\n<h3 id=\"partial-evaluation\" style=\"position:relative;\"><a href=\"#partial-evaluation\" aria-label=\"partial evaluation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partial Evaluation</h3>\n<p>Another cool trick this approach gives us is partial evaluation. Suppose we gain partial information about a predicate, but it's incomplete.\nFor instance, we know that <code class=\"language-text\">evaluate(a)</code> should be <code class=\"language-text\">True</code> but we don't know what <code class=\"language-text\">evaluate(b)</code> should be.</p>\n<p>Concretely, suppose we have a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def partialEvaluate(e: EventSpec): Option[Boolean] = ...</code></pre></div>\n<p>We can then partially evaluate our predicates:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def partiallyEvaluatePredicate(e: EventPredicate) =\n  nat( (e:EventSpec) =&gt; {\n    partialEvaluate(e).fold( e )(x =&gt; {\n      if (x) { True } else { False }\n      })\n    })</code></pre></div>\n<p>Then, supposing we know <code class=\"language-text\">a</code> to be true but <code class=\"language-text\">b</code> is unknown, this will evaluate to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">partiallyEvaluatePredicate(a &amp; b) ===\n  partialEvaluate(a) &amp; partialEvaluate(b) ===\n  True &amp; b ===\n  b</code></pre></div>\n<p>This is useful to us in a variety of cases. Often times we'll have a predicate which combines information known server\nside, and other information which is only known in the browser. Partial evaluation lets us compute the server side information,\nsubstitute this result in, and have a resulting predicate which depends only on browser-side information.</p>\n<p>The browser-side predicate can then be rendered to javascript and evaluated in the browser directly. This is pretty straightforward, in fact:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def evaluateServerSide(e: ServerSideEventSpec): Boolean = ...\n\ndef browserify(e: EventPredicate): BrowserSideEventPredicate =\n  nat( (e:EventSpec) =&gt; e match {\n      case (b:BrowserSideEventSpec) =&gt; b.point[FreeBool] : BrowserSideEventPredicate\n      case (s:ServerSideEventSpec) =&gt; if (evaluateServerSide(s)) {\n         TruePred : BrowserSideEventPredicate\n       } else {\n         FalsePred : BrowserSideEventPredicate\n       }\n    }\n  )</code></pre></div>\n<h1 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h1>\n<p>Free objects are a great way to build generalized interpreter patterns. Just as the <code class=\"language-text\">FreeMonad</code> (called simply <code class=\"language-text\">Free</code> in Scalaz) enables one to build generalized\nstateful computations, abstracting away the actual state, <code class=\"language-text\">FreeBool</code> allows us to build generalized predicates and manipulate them in a straightforward manner.</p>\n<p>More generally, if you find yourself re-implementing the same algebraic structure over and over, it might be worth asking yourself if a free version of\nthat algebraic structure exists. If so, you might save yourself a lot of work by using that.</p>\n<h1 id=\"other-free-objects\" style=\"position:relative;\"><a href=\"#other-free-objects\" aria-label=\"other free objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Free Objects</h1>\n<p>One important free object is the <code class=\"language-text\">FreeMonoid</code>. It turns out that the functor <code class=\"language-text\">List[_]</code> is actually a Free Monoid. This can be shown by defining <code class=\"language-text\">nat</code> for a list:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def nat[A,B](f: A=&gt;B)(implicit m: Monoid[B]): (List[A] =&gt; B) =\n  (l: List[A]) =&gt; l.map(f).reduce((x,y) =&gt; m.append(x,y))</code></pre></div>\n<p>Essentially, the natural transformation consists of taking each element of the list, applying the function <code class=\"language-text\">f</code> to it, and then appending the elements.</p>\n<p>A somewhat more interesting free algebra is the <code class=\"language-text\">FreeGroup</code>. A <code class=\"language-text\">Group</code> is a <code class=\"language-text\">Monoid</code>, but with an additional operation - inversion. Inversion - denoted by <code class=\"language-text\">~x</code> - has the important property that for any <code class=\"language-text\">x</code>, <code class=\"language-text\">(~x) |+| x = zero</code> and <code class=\"language-text\">x |+| (~x) = zero</code>. I.e., appending two elements together can always be undone by appending a new element.</p>\n<p>For an example of a group, consider the integers - <code class=\"language-text\">x |+| y = x + y</code>, and <code class=\"language-text\">~x = -x</code>.</p>\n<p>The type <code class=\"language-text\">FreeGroup[A] then consists essentially of a</code>List[A]<code class=\"language-text\">, with the caveat that</code>a<code class=\"language-text\">and</code>~a` cannot occur adjacent to each other in the list.</p>\n<p>Similarly, a <code class=\"language-text\">FreeMonad</code> is a way of taking any <code class=\"language-text\">Functor</code> and getting an abstract monad out of it. This is implemented <a href=\"https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Free.scala\">in scalaz</a>, so the naming is a little different. Given an object <code class=\"language-text\">x: Free[S,A]</code> (for <code class=\"language-text\">S[_]</code> a <code class=\"language-text\">Functor</code>), <code class=\"language-text\">x</code> has the method <code class=\"language-text\">foldMap[M[_]](f: S ~&gt; M)(implicit M: Monad[M]): M[A]</code>. This method implements the natural transformation. In the language we are using here, we could define <code class=\"language-text\">nat</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def nat[S,M,A](f: S[A] =&gt; M[A])(implicit m: Monad[M]): (Free[S,A] =&gt; M[A]) =\n  (x:Free[S,A]) =&gt; x.foldMap(f)(m)</code></pre></div>\n<p>As an illustrated example of how free monads work, <a href=\"http://polygonalhell.blogspot.com/2014/12/scalaz-getting-to-grips-free-monad.html\">this article</a> discusses how to represent a Forth-like DSL with the <code class=\"language-text\">FreeMonad</code> and then interpret it via a mapping from <code class=\"language-text\">Free =&gt; State</code>.</p>\n<p><a href=\"http://eed3si9n.com/learning-scalaz/Free+Monad.html\">Free Monad</a>.\n<a href=\"http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html\">Free Monads are Simple</a>\n<a href=\"http://underscore.io/blog/posts/2015/04/23/deriving-the-free-monad.html\">Deriving the Free Monad</a></p>","timeToRead":13,"excerpt":"In the GOF book, the interpreter pattern is probably one of the most poorly described patterns. The interpreter pattern basically consists…","frontmatter":{"title":"Free objects - a generalized interpreter pattern","author":"Chris Stucchio","authorslug":"chris_stucchio"},"fields":{"slug":"/posts/Free-objects/","date":"February 14, 2016"}}},"pageContext":{"slug":"/posts/Free-objects/","date":"2016-02-14T18:30:00.000Z","nexttitle":"SuperElasticsearch - More Python goodness in elasticsearch-py","nextslug":"/posts/superlelasticsearch/","prevtitle":"A layout trick","prevslug":"/posts/layout-trick/"}}}