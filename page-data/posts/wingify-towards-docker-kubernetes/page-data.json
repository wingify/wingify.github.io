{"componentChunkName":"component---src-templates-post-js","path":"/posts/wingify-towards-docker-kubernetes/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction:</h2>\n<p>At Wingify, we follow microservices based architecture to leverage it's great scalability benefits. We have a lot of microservices along with a complex networking setup among them. Currently, all the services are deployed on virtual machines on the cloud. We wanted to improve this architecture set up and use the latest technologies available. To avoid all this we are moving towards <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://kubernetes.io/\">Kubernetes</a> world!</p>\n<h2 id=\"why-docker-and-kubernetes\" style=\"position:relative;\"><a href=\"#why-docker-and-kubernetes\" aria-label=\"why docker and kubernetes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why Docker and Kubernetes?</h2>\n<p>The problems we are facing with the existing infrastructure:</p>\n<ul>\n<li>\n<p><strong>Standardization and consistency</strong></p>\n<ul>\n<li>There is always an issue of a consistent/standard environment between production and development.</li>\n<li>Most of our time goes in creating a production like environment during development to rollout bugfixes or create any new features.</li>\n<li>With the new architecture, now we are more equipped to efficiently analyze and fix bugs within the application. It has drastically reduced the time wasted on \"local environment issues\" and in turn increased time available to fix actual issues and new feature development.</li>\n<li>Docker provides a repeatable production like development environment and eliminates the \"it works on my machine\" problem once and for all.</li>\n</ul>\n</li>\n<li>\n<p><strong>Local development</strong></p>\n<ul>\n<li>It's not easy to develop and debug a service locally and connect it to the rest of the services running on local environment.</li>\n<li>Constantly redeploying on local environment to test the changes is time consuming.</li>\n</ul>\n</li>\n<li>\n<p><strong>Auto scaling</strong></p>\n<ul>\n<li>The load on the services can never be the same all the time.</li>\n<li>Keeping the services up for the whole year just to handle the peak load which comes on a few days of the festive season is a waste of resources.</li>\n<li>Regularly benchmarking the load to scale the services with time is not an optimal way.</li>\n</ul>\n</li>\n<li>\n<p><strong>Auto service restarts</strong></p>\n<ul>\n<li>If the service goes in a hanged state or terminates due to memory leak, resource polling deadlocks, file descriptors issues or anything else, how it is going to restart automatically?</li>\n<li>Although there are different tools available for multiple languages but setting them up for each service on every server is not ideal.</li>\n</ul>\n</li>\n<li>\n<p><strong>Load balancing</strong></p>\n<ul>\n<li>Adding and maintaining an extra entry point like nginx just to provide load balancing is an overhead.</li>\n</ul>\n</li>\n</ul>\n<p>We are trying to tackle all these problems in an automated and easy way using Docker, Kubernetes and few open-source tools.</p>\n<h2 id=\"our-journey\" style=\"position:relative;\"><a href=\"#our-journey\" aria-label=\"our journey permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our Journey</h2>\n<p>We started out from scratch. Read a lot of articles, documentation, tutorials and went through some existing testing and production level open source projects. Some of them solved a few of our problems, for some we found our own way and the rest of them are yet to be solved!</p>\n<p>Below is a brief idea of all the ideas and approaches we found to solve many of our problems, the final approach we took and comparison between them:</p>\n<h3 id=\"common-repository-approach\" style=\"position:relative;\"><a href=\"#common-repository-approach\" aria-label=\"common repository approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common repository approach</h3>\n<p>Every dockerized service starts with a Dockerfile. But the initial issue is where to put them? There will be a lot of Dockerfiles combining all the services.</p>\n<p>There are two ways to put them:</p>\n<ol>\n<li>\n<p><strong>Each service contains it's own dockerfile</strong></p>\n<ul>\n<li>All the repositories have separate dockerfiles specific to that service.</li>\n</ul>\n</li>\n<li>\n<p><strong>A common repository of all dockerfiles</strong></p>\n<ul>\n<li>All the dockerfiles of every service are added to a common repository.</li>\n</ul>\n</li>\n</ol>\n<p>Below is the comparison among them:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Common Repository</th>\n<th>Separate Repositories</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.</td>\n<td>Need a proper structure to distinguish dockerfiles</td>\n<td>Separation of concerns</td>\n</tr>\n<tr>\n<td>2.</td>\n<td>Common Linters and Formatters</td>\n<td>Each repo has to add the same linter and formatter repetitively</td>\n</tr>\n<tr>\n<td>3.</td>\n<td>Common githooks to regulate commit messages, pre-commit, pre-push, etc. tasks</td>\n<td>Same githooks in every service</td>\n</tr>\n<tr>\n<td>4.</td>\n<td>Can contain reusable Docker base-files</td>\n<td>No central place to put reusable dockerfiles</td>\n</tr>\n<tr>\n<td>5.</td>\n<td>A central place for DevOps to manage the permissions of all dockerfiles</td>\n<td>Very difficult to manage dockerfiles individually by Devops</td>\n</tr>\n</tbody>\n</table>\n<p>You may be thinking about the ease of local development using volumes in the separate repository approach. We will get back to that later and show how easy it will be in a common repository approach.</p>\n<p>So, the common repository approach is a clear winner among them. But what about its folder structure? We gave it plenty of thoughts and finally, this is our Docker repository folder structure:</p>\n<div style=\"text-align:center;margin:50px\">\n  <img src=\"/images/2019/11/docker_common_repo_structure.png\" style=\"height:500px;box-shadow: 2px 2px 10px 1px #222\">\n</div>\n  \nThe folder structure is broadly categorized into 2 parts:\n  * **Services directory:**\n    - It contains the directories of all the services each having their own 'dockerfile' and '.dockerignore' files.\n    - Internally they inherit from the base images.\n  * **Reusable base images directory:**\n    - It contains all the reusable dockerfiles that are categorized broadly according to their respective languages like node, PHP, etc.\n    - Dockerfiles containing only the languages are placed in the 'base' folder.\n    - All the extensions, plugins, tools, etc. of above base images are placed in the same directory, like 'thrift' for node.js.\n    - Versions are important as multiple services may use different versions of the same plugins. Like, one service may require MySQL 5.6 and the other one may require 5.7. So, each directory is further nested on the basis of versions.\n<p>Using this folder structure has multiple advantages:</p>\n<ul>\n<li>All the services and reusable base dockerfiles are segregated.</li>\n<li>It becomes very clear that which dockerfile is for what service, language or plugin.</li>\n<li>Multiple versions can be easily served.</li>\n</ul>\n<p>Next, we will discuss the reusable base images concept.</p>\n<h3 id=\"dockerfile-linter\" style=\"position:relative;\"><a href=\"#dockerfile-linter\" aria-label=\"dockerfile linter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile Linter</h3>\n<p>There are many opensource linters available for Docker files. We found <a href=\"https://github.com/hadolint/hadolint\">hadolint</a> meets most of the standards that Docker recommends. So, to lint all the files we just have to issue a simple command which can be easily integrated into the githooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hadolint **/*Dockerfile</code></pre></div>\n<h3 id=\"dockerfile-formatter\" style=\"position:relative;\"><a href=\"#dockerfile-formatter\" aria-label=\"dockerfile formatter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile Formatter</h3>\n<p>We searched and tried multiple formatters, but none of them worked as per our requirements. We found <a href=\"https://github.com/jessfraz/dockfmt\">dockfmt</a> was close to our requirements but it also has some issues like it removes all the comments from dockerfile. So, we are yet to find a better formatter.</p>\n<h3 id=\"reusable-docker-base-images\" style=\"position:relative;\"><a href=\"#reusable-docker-base-images\" aria-label=\"reusable docker base images permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reusable Docker base images</h3>\n<p>It's very common that a lot of services need the same OS, tools, libraries, etc like all the node services may need Debian stretch OS with node.js and yarn installed of a particular version. So, instead of adding them in all such Docker files, we can create some reusable, pluggable Docker base images.</p>\n<p>Below is the example of a Node.js service which requires:</p>\n<ul>\n<li>Debian stretch OS</li>\n<li>Node.js version 9.11.2 + Yarn</li>\n<li>Apache thrift version 0.10.0</li>\n</ul>\n<p><strong>Node.js base image:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> debian<span class=\"token punctuation\">:</span>stretch<span class=\"token punctuation\">-</span>slim\n\n<span class=\"token comment\"># Install Node 9.11.x</span>\n<span class=\"token comment\"># Defining builDeps as an argument in alphabetical order for better readability and avoiding duplicacy.</span>\n<span class=\"token keyword\">ARG</span> buildDeps=\" \\  \n  curl \\\n  g++ \\\n  make\"\n\n<span class=\"token comment\"># It causes a pipeline to produce a failure return code if any command results in an error.</span>\n<span class=\"token keyword\">SHELL</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pipefail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">]</span> \n<span class=\"token comment\"># hadolint ignore=DL3008,DL3015</span>\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update &amp;&amp; apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y —<span class=\"token punctuation\">-</span> no<span class=\"token punctuation\">-</span>install<span class=\"token punctuation\">-</span>recommends $buildDeps \\\n  <span class=\"token comment\"># Use --no-install-recommends to avoid installing packages that aren't technically dependencies but are recommended to be installed alongside packages.</span>\n  &amp;&amp; curl <span class=\"token punctuation\">-</span>sL https<span class=\"token punctuation\">:</span>//deb.nodesource.com/setup_9.x <span class=\"token punctuation\">|</span> bash <span class=\"token punctuation\">-</span> &amp;&amp; apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y nodejs=9.11.* \\\n  &amp;&amp; npm i <span class=\"token punctuation\">-</span>g yarn@1.19.1 \\\n  &amp;&amp; apt<span class=\"token punctuation\">-</span>get clean \\ \n  <span class=\"token comment\"># Remove apt-cache to make the image smaller.</span>\n  &amp;&amp; rm <span class=\"token punctuation\">-</span>rf /var/lib/apt/lists/* </code></pre></div>\n<p>Let's consider we build this with name 'wingify-node-9.11.2:1.0.5'. Where 'wingify-node-9.11.2' represents the docker image type and '1.0.5' is the image tag.</p>\n<p><strong>Apache thrift base image:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Default base image</span>\n<span class=\"token keyword\">ARG</span> BASE=wingify<span class=\"token punctuation\">-</span>node<span class=\"token punctuation\">-</span>9.11.2<span class=\"token punctuation\">:</span>1.0.5\n\n<span class=\"token comment\"># hadolint ignore=DL3006</span>\n<span class=\"token keyword\">FROM</span> $<span class=\"token punctuation\">{</span>BASE<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Declaring argument to be used in dockerfile to make it reusable.</span>\n<span class=\"token keyword\">ARG</span> THRIFT_VERSION=0.10.0 \n\n<span class=\"token comment\"># Referred from https://github.com/ahawkins/docker-thrift/blob/master/0.10/Dockerfile</span>\n<span class=\"token comment\"># hadolint ignore=DL3008,DL3015</span>\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update \\\n    &amp;&amp; curl <span class=\"token punctuation\">-</span>sSL <span class=\"token string\">\"http://apache.mirrors.spacedump.net/thrift/$THRIFT_VERSION/thrift-$THRIFT_VERSION.tar.gz\"</span> <span class=\"token punctuation\">-</span>o thrift.tar.gz \\\n    &amp;&amp; mkdir <span class=\"token punctuation\">-</span>p /usr/src/thrift \\\n    &amp;&amp; tar zxf thrift.tar.gz <span class=\"token punctuation\">-</span>C /usr/src/thrift <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>strip<span class=\"token punctuation\">-</span>components=1 \\\n    &amp;&amp; rm thrift.tar.gz \\\n    <span class=\"token comment\"># Clean the apt cache on.</span>\n    &amp;&amp; apt<span class=\"token punctuation\">-</span>get clean \\\n    <span class=\"token comment\"># Remove apt cache to make the image smaller.</span>\n    &amp;&amp; rm <span class=\"token punctuation\">-</span>rf /var/lib/apt/lists/* \n\n<span class=\"token keyword\">WORKDIR</span> /usr/src/thrift\n<span class=\"token keyword\">RUN</span> ./configure  <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>without<span class=\"token punctuation\">-</span>python <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>without<span class=\"token punctuation\">-</span>cpp \\\n    &amp;&amp; make \\\n    &amp;&amp; make install \\\n    <span class=\"token comment\"># Removing the souce code after installation.</span>\n    &amp;&amp; rm <span class=\"token punctuation\">-</span>rf /usr/src/thrift</code></pre></div>\n<p>Here, by default, we are using the above-created node's Docker image. But we can pass any other environment's base image as an argument to install thrift there. So, it's pluggable everywhere.</p>\n<p>Finally, the actual service can use above as a base image for it's dockerfile.</p>\n<h3 id=\"access-private-repository-dependencies\" style=\"position:relative;\"><a href=\"#access-private-repository-dependencies\" aria-label=\"access private repository dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access private repository dependencies</h3>\n<p>We have multiple services that have some dependencies which are fetched from private repositories. Like in our node service, we have one of our dependencies listed in package.json as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"my-dependency\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git+ssh://git@stash/link/of/repo:v1.0.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Normally we need ssh keys to fetch these dependencies, but a Docker container won't be having it. Below are the few ways of solving this:</p>\n<ul>\n<li>\n<p><strong>Option 1:</strong> Install dependencies externally (local or Jenkins) and Docker will copy them directly.</p>\n<ul>\n<li>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>No SSH key required by docker.</li>\n</ul>\n</li>\n<li>\n<p><strong>Disadvantages:</strong></p>\n<ul>\n<li>Dependencies installation won't be cached automatically as it's happening outside the docker.</li>\n<li>Some modules like bcrypt have binding issues if not installed directly on the same machine.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Option 2:</strong> Pass SSH key as an argument in dockerfile or copy it from system to the working directory and let dockerfile copy it. Docker container can then install dependencies.</p>\n<ul>\n<li>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>Caching is achieved.</li>\n<li>No module binding issues.</li>\n</ul>\n</li>\n<li>\n<p><strong>Disadvantages:</strong></p>\n<ul>\n<li>SSH key would be exposed in a Docker container if not handled correctly.</li>\n<li>Single SSH keys will have security issues and different ones will be difficult to manage.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Option 3:</strong> Host the private repos globally like our own private npm (in case of node.js) and add it's host entry on the system. Docker container can then install dependencies by fetching from our private npm.</p>\n<ul>\n<li>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>Caching is achieved.</li>\n<li>No SSH key required.</li>\n</ul>\n</li>\n<li>\n<p><strong>Disadvantages:</strong></p>\n<ul>\n<li>One time setup of hosting.</li>\n<li>We need to publish the private repos each time we create a new tag.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Way 3 proved to be much better in our case and we moved ahead with it.</p>\n<h3 id=\"service-dockerfile\" style=\"position:relative;\"><a href=\"#service-dockerfile\" aria-label=\"service dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Dockerfile</h3>\n<p>The final dockerfile of the service implementing all above will be like:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ARG</span> BASE=wingify<span class=\"token punctuation\">-</span>node<span class=\"token punctuation\">-</span>9.11.2<span class=\"token punctuation\">-</span>thrift<span class=\"token punctuation\">-</span>0.10.0<span class=\"token punctuation\">:</span>1.0.5\n\n<span class=\"token comment\"># hadolint ignore=DL3006</span>\n<span class=\"token keyword\">FROM</span> $<span class=\"token punctuation\">{</span>BASE<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">RUN</span> mkdir <span class=\"token punctuation\">-</span>p /opt/my<span class=\"token punctuation\">-</span>service/\n<span class=\"token keyword\">WORKDIR</span> /opt/my<span class=\"token punctuation\">-</span>service\n\n<span class=\"token comment\"># Dependency installation separately for caching</span>\n<span class=\"token keyword\">COPY</span> ./package.json ./yarn.lock ./.npmrc ./\n<span class=\"token keyword\">RUN</span> yarn install\n\n<span class=\"token keyword\">COPY</span> . .\n\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start:docker\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Here '.npmrc' contains the registry which points to our own private npm. We are copying it so that Docker container can fetch our private repos from it.</p>\n<h3 id=\"caching\" style=\"position:relative;\"><a href=\"#caching\" aria-label=\"caching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching</h3>\n<p>Every time we change our code, we don't want Docker container to install dependencies again (unless changed). For this we divided the 'COPY' step in above dockerfile into 2 parts:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Here we are copying the package.json and yarn.lock files and doing dependencies installation.</span>\n<span class=\"token comment\"># This step will always be cached in Docker unless there is change in any of these files</span>\n<span class=\"token keyword\">COPY</span> ./package.json ./yarn.lock ./.npmrc ./\n<span class=\"token keyword\">RUN</span> yarn install\n\n<span class=\"token keyword\">COPY</span> . .</code></pre></div>\n<p>Doing all this will reduce the Docker image build time to just a few seconds!</p>\n<h3 id=\"auto-tagging-and-rollback\" style=\"position:relative;\"><a href=\"#auto-tagging-and-rollback\" aria-label=\"auto tagging and rollback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-tagging and rollback</h3>\n<p>Tagging is important for any rollback on productions. Fortunately, it's easy to do in docker. While building and pushing an image on Kubernetes we can specify the tag version with a colon. We can then use this tag in Kubernetes YAML file to deploy on the pods.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t org/my-service <span class=\"token builtin class-name\">.</span>\ndocker build -t org/my-service:1.2.3 <span class=\"token builtin class-name\">.</span>\n\ndocker push org/my-service <span class=\"token builtin class-name\">.</span>\ndocker push org/my-service:1.2.3 <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>This works fine, but it still requires a new tag every time we are building a new version of the image. This can be passed manually to a job. But what if there is auto-tagging?</p>\n<p>First, let's find out the latest tag. Here is the command to find the latest image tag from GCP:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcloud container images list-tags image-name --sort-by<span class=\"token operator\">=</span>~TAGS --limit<span class=\"token operator\">=</span><span class=\"token number\">1</span> --format<span class=\"token operator\">=</span>json</code></pre></div>\n<p>We can use this in a custom node script which will return the new incremented version. We just have to pass the image name and the release type i.e. major/minor/patch to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Usage: node file-name image-name patch</span>\n<span class=\"token keyword\">const</span> exec <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAG_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PATCH</span><span class=\"token operator\">:</span> <span class=\"token string\">'patch'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">MINOR</span><span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">MAJOR</span><span class=\"token operator\">:</span> <span class=\"token string\">'major'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Referenced from https://semver.org/</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">VERSONING_REGEX</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/^(v)?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/m</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Autotag</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>imageName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> tagType <span class=\"token operator\">=</span> <span class=\"token constant\">TAG_TYPES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PATCH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_validateParams</span><span class=\"token punctuation\">(</span>imageName<span class=\"token punctuation\">,</span> tagType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageName <span class=\"token operator\">=</span> imageName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagType <span class=\"token operator\">=</span> tagType<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Private functions</span>\n  <span class=\"token function\">_validateParams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">imageName<span class=\"token punctuation\">,</span> tagType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>imageName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image name is mandatory.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAG_TYPES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>tagType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid tag type specified. Possible values are </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>\n          <span class=\"token constant\">TAG_TYPES</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_fetchTagsFromGCP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gcloud container images list-tags </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageName\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> --sort-by=~TAGS --limit=1 --format=json</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Public functions</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stringifiedTags <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_fetchTagsFromGCP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stringifiedTags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tags <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>stringifiedTags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> tags<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">VERSONING_REGEX</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>\n              prefix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n              major <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n              minor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n              patch <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">VERSONING_REGEX</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">case</span> <span class=\"token constant\">TAG_TYPES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PATCH</span><span class=\"token operator\">:</span>\n                patch<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> <span class=\"token constant\">TAG_TYPES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINOR</span><span class=\"token operator\">:</span>\n                patch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                minor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">case</span> <span class=\"token constant\">TAG_TYPES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAJOR</span><span class=\"token operator\">:</span>\n                patch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                minor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                major<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>major<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>minor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>patch<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Return default tag if none already exists.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'0.0.1'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Autotag</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thanks <a href=\"https://twitter.com/gauravmuk\">Gaurav Nanda</a> for the above script.</p>\n<h3 id=\"production-staged-rollout\" style=\"position:relative;\"><a href=\"#production-staged-rollout\" aria-label=\"production staged rollout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Production staged rollout</h3>\n<p>Our ultimate goal is to migrate everything from the existing setup to GCP with Docker and Kubernetes. Migrating the whole system in one go on production is time-consuming as well as risky.</p>\n<p>To avoid this we are targeting individual services one by one. Initially, a service will run on GCP as well as on the existing server with their databases pointing to the old setup. We will open them for a few accounts at the beginning. The rest of the accounts will work as before. This will ensure that if any issue comes in a new setup, we can easily switch back to the old setup while fixing it.</p>\n<div style=\"text-align:center;margin:50px;\">\n  <img src=\"/images/2019/11/docker_stage_rollout.png\" style=\"box-shadow: 2px 2px 10px 1px #aaa\">\n</div>\n<h2 id=\"next-steps\" style=\"position:relative;\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h2>\n<ul>\n<li>Integrate health check APIs with Kubernetes.</li>\n<li>Development environment using <a href=\"http://telepresence.io/\">telepresence</a>.</li>\n<li>Add service discovery tool like <a href=\"https://www.consul.io/\">consul</a>.</li>\n<li>Add a vault system for secrets.</li>\n<li>Better logging.</li>\n<li>Integrate <a href=\"https://helm.sh/\">helm</a> to manage the Kubernetes cluster.</li>\n<li>Docker image size management.</li>\n<li>Add support for blue green deployments.</li>\n</ul>\n<p>We may be using some things differently that can be improved upon. There can be better tools that we are yet to explore. We are open to any suggestions that can help us in improving what we are already doing and what we will require in the future. This is just a start, we will try to improve in every iteration and solve new challenges.</p>\n<p>Thanks to <a href=\"https://twitter.com/gauravmuk\">Gaurav Nanda</a> for mentoring and guiding us for everything.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/get-started/\">https://docs.docker.com/get-started/</a></li>\n<li><a href=\"https://kubernetes.io/docs/concepts/\">https://kubernetes.io/docs/concepts/</a></li>\n<li><a href=\"https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/\">https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/</a></li>\n<li><a href=\"https://runnable.com/blog/9-common-dockerfile-mistakes\">https://runnable.com/blog/9-common-dockerfile-mistakes</a></li>\n<li><a href=\"https://github.com/wsargent/docker-cheat-sheet\">https://github.com/wsargent/docker-cheat-sheet</a></li>\n</ul>","timeToRead":12,"excerpt":"Introduction: At Wingify, we follow microservices based architecture to leverage it's great scalability benefits. We have a lot of…","frontmatter":{"title":"Wingify towards Docker and Kubernetes","author":"Punit Gupta, Kamal Sehrawat","authorslug":"punit_gupta_kamal_sehrawat_square"},"fields":{"slug":"/posts/wingify-towards-docker-kubernetes/","date":"December 02, 2019"}}},"pageContext":{"slug":"/posts/wingify-towards-docker-kubernetes/","date":"2019-12-02T18:30:00.000Z","nexttitle":"JS13K Games 2K18","nextslug":"/posts/js13k-game-development/","prevtitle":"Three Wingifighters at the BountyCon","prevslug":"/posts/three-wingifighters-at-the-bountycon/"}}}