{"componentChunkName":"component---src-templates-post-js","path":"/posts/getting-60fps-using-devtools/","result":{"data":{"markdownRemark":{"html":"<p>This post is about making your web page perform better using a\nreal world example. As you know, we recently launched a very cool <a href=\"https://visualwebsiteoptimizer.com/what-is-ab-testing/\">animated\ncomic on A/B Testing</a>.\nIt is scroll animation describing what is A/B testing. I'll talk about\nit as an example and walk you through its performance issues, how we\ndebugged them and finally what we did to extract 60 FPS out of it.</p>\n<p>The process we see in following text will applies more or less to all web pages in\ngeneral. Here's what you need to get started:</p>\n<ol>\n<li>A <a href=\"http://jankfree.org/\">janky</a> web page.</li>\n<li>Google Chrome with its awesome devtools.</li>\n<li>Determination to make it run as smooth as a hot knife through butter :)</li>\n</ol>\n<p>Worry not if you are missing any of the above, you can still read on. Let us begin.</p>\n<h2 id=\"what-is-causing-the-issue\" style=\"position:relative;\"><a href=\"#what-is-causing-the-issue\" aria-label=\"what is causing the issue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHAT is causing the issue?</h2>\n<p>All we know now is that our page is janky. When you scroll up/down\nyou'll notice that the animation is quite choppy. There are sudden jumps\noccasionally while scrolling which is really irritating and obviously a bad user\nexperience. We don't know what is causing this. The very first step we take here\nis profile the page using Chrome devtool's\n<a href=\"https://developers.google.com/chrome-developer-tools/docs/timeline\">Timeline</a>\nfeature. So I went on and fired up my devtools.</p>\n<h3 id=\"open-the-devtools\" style=\"position:relative;\"><a href=\"#open-the-devtools\" aria-label=\"open the devtools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Open the devtools</h3>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools.png\" alt=\"Chrome devtools\">\n</div>\n<p>Devtools in chrome can be fired either going to <strong>Tools > Developer Tools</strong> or\nusing the shortcut <strong>Ctrl + Shift + I</strong> on Windows/Linux and <strong>Cmd + Opt + I</strong>\non Mac.</p>\n<h3 id=\"select-frames-tab\" style=\"position:relative;\"><a href=\"#select-frames-tab\" aria-label=\"select frames tab permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Select frames tab</h3>\n<div class=\"img-wrapper\">\n    <img src=\"/images/2013/07/devetools-frames-tab.png\" alt=\"Frames tab\">\n</div>\n<p>Frames tab basically will let us visualize each frame individually showing how much time was taken by that frame and for what tasks.</p>\n<h3 id=\"filter-out-events-taking-more-than-15ms\" style=\"position:relative;\"><a href=\"#filter-out-events-taking-more-than-15ms\" aria-label=\"filter out events taking more than 15ms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter out events taking more than 15ms</h3>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-15ms.png\" alt=\"Chrome devtools\">\n</div>\n<p>Note that we are targeting 60 FPS here. A little math here gives us the number\n<em>16.666 ms</em> (<code class=\"language-text\">1 / 60 * 1000</code>). This is the time budget available per frame to\ndo its thing if we want a consistent 60 FPS.</p>\n<p>Therefore, we essentially want to investigate those frames which are crossing\nthis time limit. To do so, select the <strong>>= 15ms</strong> option from bottom bar as\nshown.</p>\n<h3 id=\"record\" style=\"position:relative;\"><a href=\"#record\" aria-label=\"record permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Record</h3>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-record.png\" alt=\"Chrome devtools\">\n</div>\n<p>Press the 'Record' button at the bottom to start devtools record what's happening\non the page. Once you do that, go back to the page and interact with the page\nas one would normally do exposing the issues we are trying to debug.</p>\n<p>In my case, the page was feeling choppy while scrolling between slides. So I\nsimply kept scrolling on the page like a normal user. After interacting for a\nwhile with the page, I get back to the devtools window and press the same button\nto stop the recording.</p>\n<h3 id=\"notice-the-frames\" style=\"position:relative;\"><a href=\"#notice-the-frames\" aria-label=\"notice the frames permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notice the frames</h3>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-initial.png\" alt=\"Chrome devtools\">\n</div>\n<p>You now see the frame data for your page... something like in the snapshot\nabove. In the image you'll notice a vertical limit with the label 60 FPS just\nbelow the label for 30 FPS. These limits are for the frames under which they\nneed to do their stuff if the respective framerate is to be achieved. Once you\nknow this, you'll straight away conclude that almost all of our frames our\ncrossing that limit like hell! This is the point where we have actually\nvisualized and confirmed the issue. Lets find out the cause.</p>\n<h3 id=\"script-events-taking-more-than-15ms\" style=\"position:relative;\"><a href=\"#script-events-taking-more-than-15ms\" aria-label=\"script events taking more than 15ms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script events taking more than 15ms</h3>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-initial-script-time.png\" alt=\"Chrome devtools\">\n</div>\n<p>Every frame's bar is made of different colour components. In the above\nsnapshots we see only yellow and green ones. A quick look at the color legend\nin the bottom bar tells us that yellow is script time and green is painting. A\ncloser analysis tells us that most frames are in majority made up of yellow\ncomponent. This means that most of the frame's time is spent in executing\nscript.</p>\n<p>Moreover if you hover over any small horizontal yellow bars below, as show in\nthe snapshot above, you'll also see the exact time that our scripts are taking\nper frame along with the corresponding event that triggered it. In my case, it's\nthe scroll event (we expected that...no?). Some of those scroll events are\ntaking upto <em>27 ms</em> which is much much more than our budget of 16ms per frame.</p>\n<h3 id=\"issue-detected-scroll-event-script\" style=\"position:relative;\"><a href=\"#issue-detected-scroll-event-script\" aria-label=\"issue detected scroll event script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Issue detected: Scroll event script</h3>\n<p>After all this analysis using the devtools we hence come to the conclusion that\nit's the script executing for every scroll event that is the cause of issue\nhere. Next step in our debug process is finding <em>WHY</em> it is causing it.</p>\n<h2 id=\"why-is-it-causing-an-issue\" style=\"position:relative;\"><a href=\"#why-is-it-causing-an-issue\" aria-label=\"why is it causing an issue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHY is it causing an issue?</h2>\n<h3 id=\"lets-investigate-the-code\" style=\"position:relative;\"><a href=\"#lets-investigate-the-code\" aria-label=\"lets investigate the code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's investigate the code</h3>\n<p>Our code for the callback bound to the Scroll event is as follows:</p>\n<p>{% highlight js %}\n$(window).scroll(function() {\nvar currentScroll = $(this).scrollTop();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Set the position to current slide if the user scrolls manually.\ncheckpoints.forEach(function(checkpoint, index) {\n  if(currentScroll &lt;= checkpoints[index] &amp;&amp; currentScroll &gt; checkpoints[index - 1])\n    i = index;\n\n  if(currentScroll &lt; checkpoints[1])\n    i = 0;\n\n  if(i == checkpoints.length - 1) {\n    $(&quot;#main_form, .social-icons&quot;).css(&quot;visibility&quot;, &quot;visible&quot;);\n\n    $(&quot;a#scrollDown&quot;).fadeOut();\n    $(&quot;a#autoscroll&quot;).fadeOut();\n  }\n  else {\n    $(&quot;#main_form, .social-icons&quot;).css(&quot;visibility&quot;, &quot;hidden&quot;);\n\n    $(&quot;a#scrollDown&quot;).fadeIn();\n    $(&quot;a#autoscroll&quot;).fadeIn();\n  }\n\n  if(currentScroll &gt; 0)\n    $(&quot;a#scrollUp&quot;).fadeIn();\n  else\n    $(&quot;a#scrollUp&quot;).fadeOut();\n});</code></pre></div>\n<p>});\n{% endhighlight %}</p>\n<p>This callback function will be our target from now on.</p>\n<h3 id=\"scroll-event-is-too-frequent-to-handle-scripts-taking-time\" style=\"position:relative;\"><a href=\"#scroll-event-is-too-frequent-to-handle-scripts-taking-time\" aria-label=\"scroll event is too frequent to handle scripts taking time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scroll event is too frequent to handle scripts taking time</h3>\n<p>First thing that striked me was that the Scroll event is fired too frequently.\nEvery time you scroll on a page, that event is fired multiple times within\nseconds. Therefore any code that is attached to the Scroll event will be fired\nwith the same frequency. And if that code is computation heavy, we are done!</p>\n<h2 id=\"fix\" style=\"position:relative;\"><a href=\"#fix\" aria-label=\"fix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FIX</h2>\n<p>To improve the situation here, we have 2 ways:</p>\n<p>A. Make the Scroll event fire less frequently\nB. Optimize the callback's code to take less execution time</p>\n<h3 id=\"fix-a-make-the-scroll-event-fire-less-frequently\" style=\"position:relative;\"><a href=\"#fix-a-make-the-scroll-event-fire-less-frequently\" aria-label=\"fix a make the scroll event fire less frequently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FIX A. Make the Scroll event fire less frequently</h3>\n<p>I could make the Scroll code fire less frequently in our case as it did not had\nany usability hit. In fact mostly the code thats required to be executed on\nScroll event can be run on little longer intervals without any user experience\nloss.</p>\n<p>This thing was easy to do. <a href=\"http://benalman.com/\">Ben Alman</a> has an <a href=\"http://benalman.com/projects/jquery-throttle-debounce-plugin/\">awesome\njQuery plugin</a>\nwritten for throttling/debouncing functions. Its very easy to use too. Simply\nget the plugin into your page and pass the throttled function to Scroll event\nlike so:</p>\n<p>{% highlight js %}\nvar callback = function () {\n...\n}</p>\n<p>$(window).scroll( $.throttle(350, callback));\n{% endhighlight %}</p>\n<p>As you see in above code, I have made my callback to fire atmost once within\n<em>350 ms</em>. In other words, there will be atleast an interval of <em>350 ms</em> between\n2 calls to that function. This should probably keep those adjacent long yellow\nbar at some distant from each. We'll see.</p>\n<h3 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TEST!</h3>\n<p>We made a small change from our side. But remember, there is no point of it\nwithout actually testing the page and getting a performance boost. So lets\nrepeat the profiling procedure again.</p>\n<p>Here is what we got this time:</p>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-iter1-a.png\" alt=\"Result\">\n</div>\n<p>Seems to have worked quite a bit! We have lesser frames overshooting the 16ms budget.</p>\n<h3 id=\"fix-b-optimize-the-callbacks-code-to-take-less-execution-time\" style=\"position:relative;\"><a href=\"#fix-b-optimize-the-callbacks-code-to-take-less-execution-time\" aria-label=\"fix b optimize the callbacks code to take less execution time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FIX B. Optimize the callback's code to take less execution time</h3>\n<p>Secondly, its also important to optimize the code inside that callback at that is what is causing the frames to go beyond our 16ms budget.</p>\n<p>If you look closely inside the callback's code and have a basic understanding of what not do while jQuery, you'll see some horrible things happening there. I'll not go in much details on why those things are bad as our focus is on using devtools in this article. Lets list out what all jQuery menace we see in it:</p>\n<ul>\n<li>Cache jQuery objects</li>\n</ul>\n<p>At many places, jQuery is being used to reference element by passing their selectors again and again in the callback. That is BAD. Unless these references will change in future, its wise to calculate them once and cache for future use.</p>\n<p>Some of the lines where jQuery is being used unnecessarily: </p>\n<p>{% highlight js %}\nvar currentScroll = $(this).scrollTop(); // this is always window object\n{% endhighlight %}</p>\n<p>{% highlight js %}\n$(\"#main_form, .social-icons\").css(\"visibility\", \"visible\");</p>\n<p>  $(\"a#scrollDown\").fadeOut();\n$(\"a#autoscroll\").fadeOut();\n{% endhighlight %}</p>\n<p>{% highlight js %}\n$(\"a#scrollUp\").fadeIn();\n{% endhighlight %}</p>\n<p>{% highlight js %}\n$(\"a#scrollUp\").fadeOut();\n{% endhighlight %}</p>\n<ul>\n<li>Unnecessary animation</li>\n</ul>\n<p>Have a look at the following code snippet:</p>\n<p>{% highlight js %}\nif(i == checkpoints.length - 1) {\nsocialIcons.css(\"visibility\", \"visible\");</p>\n<p>  scrollDownBtn.fadeOut();\nscrollAutoBtn.fadeOut();\n}\nelse {\nsocialIcons.css(\"visibility\", \"hidden\");</p>\n<p>  scrollDownBtn.fadeIn();\nscrollAutoBtn.fadeIn();\n}\n{% endhighlight %}</p>\n<p>The first <code>if</code> checks if we are on the last iteration of the loop or not. If not, then the <code>else</code> part executes. Which means if the loop runs 100 times, 99 times the <code>else</code> part executes. Moreover if you see carefully the code in the <code>else</code> block, it will keep fading in/out certain elements on each iteration, even when it has done the same thing in past iteration. Taking account the heavy animation account cost in jQuery, this is absolutely unnecessary work being done here.</p>\n<p>We could simply do that stuff once and set a flag which will be checked next time and we only do it again if the flag is unset somehow.</p>\n<h3 id=\"final-code\" style=\"position:relative;\"><a href=\"#final-code\" aria-label=\"final code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final code</h3>\n<p>After the above 2 fixes, here is how our Scroll event callback looks like:</p>\n<p>{% highlight js %}\nfunction scrollHandling() {\nvar currentScroll = $window.scrollTop();</p>\n<p>  // Set the position to current slide if the user scrolls manually.\ncheckpoints.forEach(function(checkpoint, index) {\nif(currentScroll &#x3C;= checkpoints[index] &#x26;&#x26; currentScroll > checkpoints[index - 1])\ni = index;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(currentScroll &lt; checkpoints[1])\n  i = 0;\n\nif(i == checkpoints.length - 1) {\n  socialIcons.css(&quot;visibility&quot;, &quot;visible&quot;);\n\n  scrollDownBtn.fadeOut();\n  scrollAutoBtn.fadeOut();\n  lastSlideUIapplied = true;\n}\nelse if (lastSlideUIapplied) {\n  socialIcons.css(&quot;visibility&quot;, &quot;hidden&quot;);\n\n  scrollDownBtn.fadeIn();\n  scrollAutoBtn.fadeIn();\n  lastSlideUIapplied = false;\n}\n\nif (currentScroll &gt; 0) {\n  scrollUpBtn[0].style.display == &#39;none&#39; &amp;&amp; scrollUpBtn.fadeIn();\n}\nelse {\n  scrollUpBtn.fadeOut();\n}</code></pre></div>\n<p>  });\n}</p>\n<p>$window.scroll( $.throttle(250, scrollHandling));\n{% endhighlight %}</p>\n<h2 id=\"test-again\" style=\"position:relative;\"><a href=\"#test-again\" aria-label=\"test again permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TEST AGAIN!</h2>\n<p>Needless to say, our next step is to test the changes made. Here is what the\ntimeline says now:</p>\n<div class=\"img-wrapper\">\n  <img src=\"/images/2013/07/devtools-iter1-b.png\" alt=\"Final result\">\n</div>\n<p>Bingo!</p>\n<ul>\n<li>We hardly have any frames overshooting the target line of 60 FPS.</li>\n<li>We get an average execute time of <em>11.71 ms</em> per frame with a standard deviation of around <em>4.97 ms</em>.</li>\n</ul>\n<h2 id=\"going-further\" style=\"position:relative;\"><a href=\"#going-further\" aria-label=\"going further permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Going further</h2>\n<p>We still see paint (green) events which are causing some frames to overshoot\nthe border. It is basically on slides where large image are being animated on\nthe screen. Its not that we can scale down the images or stop them from being\npainted. The solution still needs to be figured out to optimize the painting\ngoing on here. Suggestions?</p>\n<h2 id=\"last-words\" style=\"position:relative;\"><a href=\"#last-words\" aria-label=\"last words permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Last words</h2>\n<p>As Chrome folks say it, <strong>don’t guess it, test it!</strong></p>","timeToRead":9,"excerpt":"This post is about making your web page perform better using a\nreal world example. As you know, we recently launched a very cool animated…","frontmatter":{"title":"Getting 60 FPS using Chrome devtools","author":"Kushagra Gour","authorslug":"kushagra_gour"},"fields":{"slug":"/posts/getting-60fps-using-devtools/","date":"July 28, 2013"}}},"pageContext":{"slug":"/posts/getting-60fps-using-devtools/","date":"2013-07-28T18:30:00.000Z","nexttitle":"please.js - A simple PostMessage based communication library","nextslug":"/posts/please-js-release/","prevtitle":"Internship experience @Wingify","prevslug":"/posts/internship-experience-at-wingify/"}}}